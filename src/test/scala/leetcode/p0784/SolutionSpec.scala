package leetcode.p0784

import leetcode.p0784.Solution._
import org.scalatest.FunSpec

class SolutionSpec extends FunSpec {

  describe("product") {

    describe("should return cartesian products of lists") {

      it("in case lists is Nil") {
        val actual = product(Nil)
        assert(Nil === actual)
      }

      it("in case has only one element") {
        val expected = List(List('a), List('A))
        val actual = product(List(List('a, 'A)))
        assert(expected === actual)
      }

      it("in standard recursive case") {
        val expected = List(List('a, 'b), List('a, 'B), List('A, 'b), List('A, 'B))
        val actual = product(List(List('a, 'A), List('b, 'B)))
        assert(expected === actual)
      }

    }

  }

  describe("letterCasePermutation") {

    describe("should return a list of joined Strings after generated by product calculation") {

      it("in case has only alphas") {
        // (a, A) (b, B)
        val expected = List("ab", "aB", "Ab", "AB")
        val actual = letterCasePermutation("ab")
        assert(expected === actual)
      }

      it("in case has alnums") {
        // (a, A) (1) (b, B) (2)
        val expected = List("a1b2", "a1B2", "A1b2", "A1B2")
        val actual = letterCasePermutation("a1b2")
        assert(expected === actual)
      }

    }

  }

}
